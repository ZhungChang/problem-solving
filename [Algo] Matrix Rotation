using System;
using System.Collections.Generic;
using System.IO;
class Solution {
    static void Main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
        string[] condition = Console.ReadLine().Split(' ');
            int m = int.Parse(condition[0]);
            int n = int.Parse(condition[1]);
            int c = int.Parse(condition[2]);
            Convert convert = new Convert(m, n, c);
            int[,] matrix = new int[m, n];
            for (int i = 0; i < m; i++)
            {
                string[] arr = Console.ReadLine().Split(' ');
                for (int j = 0; j < n; j++)
                {
                    matrix[i,j] = int.Parse(arr[j]);
                }
            }
            convert.Value = matrix;

            int[,] answer = convert.Mapping();
            for (int i = 0; i < convert.M; i++)
            {
                for (int j = 0; j < convert.N; j++)
                {
                    Console.Write(answer[i, j] + " ");
                }
                Console.WriteLine();
            }

            Console.ReadLine();
    }
    public class Convert
    {
        public int M { get; set; }
        public int N { get; set; }
        public int Count { get; set; }
        public int[,] Value { get; set; }


        public Convert(int m, int n, int count)
        {
            this.M = m;
            this.N = n;
            this.Count = count;
            Value = new int[M, N];
        }

        public int[,] Mapping()
        {
            int cycle = Math.Min(M, N) / 2;
            int[,] valueMatrix = new int[M,N];

            for (int i = 0; i < cycle; i++)
            {
                int m = M - 2 * i;
                int n = N - 2 * i;
                int cycleLength = 2 * ( m + n ) - 4;

                Location[] locationArray = new Location[cycleLength];

                int x = 0 + i;
                int y = 0 + i;

                bool isRow = true;

                for (int j = 0; j < cycleLength/2; j++)
                {
                    locationArray[j] = new Location(x, y);
                    locationArray[cycleLength / 2 + j] = new Location(m-x+2*i-1, n-y+2*i-1);

                    if (isRow)
                    {
                        y++;
                        if (y == n + i)
                        {
                            isRow = false;
                            x++;
                            y--;
                        }
                    }
                    else
                    {                      
                        x++;
                    }
                }
                int[] changedValue = Rotated(locationArray);

                for (int z = 0; z < cycleLength; z++)
                {
                    Location point = locationArray[z];
                    int row = point.row;
                    int column = point.column;
                    valueMatrix[row, column] = changedValue[z];
                }
            }
            return valueMatrix;
        }
        public struct Location
        {
            public int row, column;

            public Location(int row, int column)
            {
                this.row = row;
                this.column = column;
            }
        }

        public int[] Rotated(Location[] array)
        {
            int length = array.Length;
            int step = Count % array.Length;
            int[] convertedArray = new int[length];
            for (int i = 0; i < length; i++)
            {
                int index = (i + step) % array.Length;
                int row = array[index].row;
                int column = array[index].column;
                convertedArray[i] = Value[row, column];
            }
            return convertedArray;
        }
    }
}
